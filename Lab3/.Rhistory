}
tSquared <- t / n
# simulate postarior draws
X_draw <- rchisq(n_draws, n)
sigma_sq = n*tSquared / X_draw
#theoretical
theoretical <- function(theta, v, s) {
return ( ((v/2) ^ (v/2)) / gamma(v/2)  * (s ^ v) * (theta ^ (-(v/2+1))) * exp((-v * s ^ 2) / (2 * theta) ))
}
range <- seq(0,10,by=0.01)
mx <- 0 * range
for (i in 1:length(range)) {
mx[i] <- theoretical(range[i], length(income), sqrt(tSquared))
}
# plot
hist(1/sigma_sq, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
# -----------A-------------
income <- c(14,25,45,25,30,33,19,50,34,67)
#income <- c(1,1,1,1,1,1,1,1,1,1)
m <- 3.5
n <- length(income)
n_draws = 10000
t <- 0
for (v in income) {
t <- t + (log(v) - m) ^ 2
}
tSquared <- t / n
# simulate postarior draws
X_draw <- rchisq(n_draws, n)
sigma_sq = n*tSquared / X_draw
#theoretical
theoretical <- function(theta, v, s) {
return ( ((v/2) ^ (v/2)) / gamma(v/2)  * (s ^ v) * (theta ^ (-(v/2+1))) * exp((-v * s ^ 2) / (2 * theta) ))
}
range <- seq(0,10,by=0.01)
mx <- 0 * range
for (i in 1:length(range)) {
mx[i] <- theoretical(range[i], length(income), sqrt(tSquared))
}
# plot
hist(sigma_sq, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
# plot
hist(sigma_sq, 100, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
hist(G, 1000, freq = FALSE, xlab="posterior of Gini coefficient", ylab="") # Plot where y = values and x = index of the value in the vector
# plot
hist(sigma_sq, 100, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
# plot
hist(sigma_sq, 1000, freq=FALSE)
# plot
hist(sigma_sq, 100, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
cred_int <- quantile(G, probs = c(a, b))
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
G_dens = density(G)
View(G_dens)
View(G_dens)
sumY <- sum(G_dens.y)
sumY <- sum(G_dens.Y)
sumY <- sum(G_dens[y])
sumY <- sum(G_dens['y'])
sumY <- sum(G_dens[,y])
sumY <- sum(G_dens[,'y'])
sumY <- sum(G_dens["y",])
sumY <- sum(G_dens["y"])
sumY <- (G_dens["y"])
View(sumY)
sumY <- Reduce("+", G_dens["y"])
sumY <- Reduce("+", G_dens["y"])
sumY <- Reduce("+", G_dens["y",])
sumY <- Reduce("+", G_dens["y"])
View(G_dens)
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
View(G.dens)
View(G_dens)
?density
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
View(yVals)
sum <- sum(G_dens$y)
y_ordered = G_dens$y[order(-G_dens$y)]
y_ordered = G_dens$y[order(+G_dens$y)]
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$x)]
dens_mass = sum(G_dens$y)
sum <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
cred_int <- quantile(G, probs = c(a, b))
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
a <- 0.025
b <- 0.975
cred_int <- quantile(G, probs = c(a, b))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
cred_int <- quantile(G, probs = c(0.025, 0.975))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
cred_int <- quantile(G, probs = c(0.025, 0.975))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
current_mass <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
cred_int <- quantile(G, probs = c(0.025, 0.975))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
current_mass <- 0
for (i in 1:length(y_ordered)) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
k <- dexp(1)
plot(k)
k <- dexp(y,1)
plot(k)
?dexp
n = seq(0, 10, by=0.01)
k <- dexp(n,1)
plot(k)
plot(k, type='l')
?bessel
?pi
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_3.R')
clear
?clear
k <- length(kappa)
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_3.R')
?dexp
kappa <- dexp(1)
kappa <- dexp(2)
kappa <- dexp(x,lambda)
k <- length(kappa)
y <- c(-2.44, 2.14, 2.54, 1.83, 2.01, 2.33, -2.79, 2.23, 2.07, 2.02)
x <- seq(0,10, by=0.01)
mu <- 2.39
lambda <- 1
kappa <- dexp(x,lambda)
k <- length(kappa)
plot(k, kappa, type = 'l')
plot(x, kappa, type = 'l')
?sapply
likelihood = likelihood*Mises(kappa, y, mu)
likelihood = Mises(kappa, y, mu)
likelihood = Mises(kappa, y, mu)
Mises <- function(kappa, y, mu) {
I <- besselI(kappa,0)
return (exp(kappa*cos(y-mu)))/(2*pi*I)
}
likelihood = Mises(kappa, y, mu)
likelihood = Mises(kappa[1], y, mu)
install.packages(knitr)
install.packages('knitr')
install.packages("knitr")
install.packages("rmarkndown")
install.packages("markndown")
install.packages(“devtools”)
install.packages('devtools')
setwd("~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3")
library(mvtnorm)
data <- read.table("eBayNumberOfBidderData.txt", header = TRUE)
fit <- glm(nBids ~ 0 + ., data, family = poisson)
library(mvtnorm)
data <- read.table("eBayNumberOfBidderData.txt", header = TRUE)
fit <- glm(nBids ~ 0 + ., data, family = poisson)
#Obtain p-values
p_values <- coef(summary(fit))[,4]
coeff <- t(fit$coefficients)
plot(abs(coeff), type='h',
lwd=2,
xlab = "coefficient index",
main='Significance of covariates',
ylab='absolute value of coefficient')
X <- as.matrix(data[,2:10])
sigmaPrior <- 100 * solve(t(X)%*%X)
logPois <- function(beta, y, X, ...) {
# log likelihood of poisson model
if(!is.null(dim(beta))) {
beta <- beta[1,]
}
lambda <- exp(X%*%beta)
logLik <- sum(dpois(y, lambda, log=TRUE))
if (logLik == -Inf) {
logLik <- -2000
}
# logLik <- logLik + y[i] * t(beta)%*%x[i,] - exp( t(beta)%*%x[i,] - log(factorial(y[i])))
# log of prior
logPrior <- dmvnorm(beta, mean = rep(0, 9), sigma = sigmaPrior, log=TRUE)
# add
return(logLik + logPrior)
}
OptimResults<-optim(coeff,logPois,gr=NULL, y = data$nBids,X = X, method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
postCov <- -solve(OptimResults$hessian)
st_div <- sqrt(diag(postCov))
betaMode <- OptimResults$par
gaussianSample <- function(theta, sigma, c) {
val <- rmvnorm(1, theta, c*sigma)
return (val)
}
RWMSampler <- function(c, it, initBeta, fn, ...) {
accRate <- 0
sample <- c()
prev <- gaussianSample(initBeta, postCov, c)
for (i in 1:it) {
candidate <- gaussianSample(prev, postCov, c)
alpha <- min(1, exp( fn(candidate, ...) - fn(prev, ...) ))
u <- runif(1, 0, 1)
if (alpha >= u) {
# accept candidate
prev <- candidate
accRate <- accRate + 1
# as matrix
sample <- rbind(sample, prev)
}
}
return (sample)
}
# sample with random walk metropolis
sample <- RWMSampler(1,1000, rep(0, 9), logPois, as.vector(data$nBids), X)
hist(sample[,9])
plot(sample[,1],
sample[,2],
type='l',
xlab = expression(beta[1]),
ylab = expression(beta[2]),
main = expression("Samples of" ~ beta[1] ~ "and" ~ beta[2])
)
# plot trajectoroies for beta 9
plot(sample[,9], type = 'l')
dim(sample)
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
png("lab3_c_" + i + ".png")
plot(sample[,i], type = 'l', main=paste("Beta", i))
dev.off()
}
i <- 1
file <- "lab3_2c_" + i + ".png"
file <- "lab3_2c_" & i & ".png"
file <- paste("lab3_2c_",i,".png"
)
file <- paste("lab3_2c_",.i,.".png")
?paste
file <- paste("lab3_2c_",i,".png", sep="")
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png("lab3_c_" + i + ".png")
plot(sample[,i], type = 'l', main=paste("Beta", i))
dev.off()
}
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png(file)
plot(sample[,i], type = 'l', main=paste("Beta", i))
dev.off()
}
betaMode
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png(file)
plot(sample[,i], type = 'l', main=paste("Beta", i))
abline(h=mean(sample[,i]), col"red")
dev.off()
}
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png(file)
plot(sample[,i], type = 'l', main=paste("Beta", i))
abline(h=mean(sample[,i]), col="red")
dev.off()
}
mean(sample[,1])
mean(sample[,2])
mean(sample[,3])
colMeans(sample)
betaMode
# sample with random walk metropolis
burnin <- 500
it <- 10000
nIter <- burnin + it
sample <- RWMSampler(1,nIter, rep(0, 9), logPois, as.vector(data$nBids), X)
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png(file)
plot(sample[,i], type = 'l', main=paste("Beta", i))
abline(h=mean(sample[,burnin:i]), col="red")
dev.off()
}
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png(file)
plot(sample[,i], type = 'l', main=paste("Beta", i))
abline(h=mean(sample[burnin+1:it,i]), col="red")
dev.off()
}
# sample with random walk metropolis
burnin <- 500
it <- 10000
nIter <- burnin + it
sample <- RWMSampler(1,nIter, rep(0, 9), logPois, as.vector(data$nBids), X)
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png(file)
plot(sample[,i], type = 'l', main=paste("Beta", i))
abline(h=mean(sample[burnin+1:it,i]), col="red")
dev.off()
}
dim(sample)
RWMSampler <- function(c, it, initBeta, fn, ...) {
accRate <- 0
sample <- c()
prev <- gaussianSample(initBeta, postCov, c)
for (i in 1:it) {
candidate <- gaussianSample(prev, postCov, c)
alpha <- min(1, exp( fn(candidate, ...) - fn(prev, ...) ))
u <- runif(1, 0, 1)
if (alpha >= u) {
# accept candidate
prev <- candidate
accRate <- accRate + 1
# as matrix
}
sample <- rbind(sample, prev)
}
return (sample)
}
sample <- RWMSampler(1,nIter, rep(0, 9), logPois, as.vector(data$nBids), X)
dim(sample)
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png(file)
plot(sample[,i], type = 'l', main=paste("Beta", i))
abline(h=mean(sample[burnin+1:it,i]), col="red")
dev.off()
}
OptimResults<-optim(coeff,logPois,gr=NULL, y = data$nBids,X = X, method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
postCov <- -solve(OptimResults$hessian)
st_div <- sqrt(diag(postCov))
betaMode <- OptimResults$par
betaMode
OptimResults$par
OptimResults
extract(OptimResults)
extract(OptimResults$par)
summary(OptimResults)
fit <- glm(nBids ~ 0 + ., data, family = poisson)
#Obtain p-values
p_values <- coef(summary(fit))[,4]
coeff <- t(fit$coefficients)
coeff
st_div
?png
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png(file, width = 600, height = 1000)
plot(sample[,i], type = 'l', main=paste("Beta", i))
abline(h=mean(sample[burnin+1:it,i]), col="red")
dev.off()
}
?rmd
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png(file, width = 1000, height = 600)
plot(sample[,i], type = 'l', main=paste("Beta", i))
abline(h=mean(sample[burnin+1:it,i]), col="red")
dev.off()
}
# plot trajectoroies for betas
for (i in 1:dim(sample)[2]) {
file <- paste("lab3_2c_",i,".png", sep="")
png(file, width = 1000, height = 650)
plot(sample[,i], type = 'l', main=paste("Beta", i))
abline(h=mean(sample[burnin+1:it,i]), col="red")
dev.off()
}
