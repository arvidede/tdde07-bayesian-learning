source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
View(G.dens)
View(G_dens)
?density
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
View(yVals)
sum <- sum(G_dens$y)
y_ordered = G_dens$y[order(-G_dens$y)]
y_ordered = G_dens$y[order(+G_dens$y)]
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$x)]
dens_mass = sum(G_dens$y)
sum <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
cred_int <- quantile(G, probs = c(a, b))
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
a <- 0.025
b <- 0.975
cred_int <- quantile(G, probs = c(a, b))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
cred_int <- quantile(G, probs = c(0.025, 0.975))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
cred_int <- quantile(G, probs = c(0.025, 0.975))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
current_mass <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
cred_int <- quantile(G, probs = c(0.025, 0.975))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
current_mass <- 0
for (i in 1:length(y_ordered)) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
k <- dexp(1)
plot(k)
k <- dexp(y,1)
plot(k)
?dexp
n = seq(0, 10, by=0.01)
k <- dexp(n,1)
plot(k)
plot(k, type='l')
?bessel
?pi
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_3.R')
clear
?clear
k <- length(kappa)
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_3.R')
?dexp
kappa <- dexp(1)
kappa <- dexp(2)
kappa <- dexp(x,lambda)
k <- length(kappa)
y <- c(-2.44, 2.14, 2.54, 1.83, 2.01, 2.33, -2.79, 2.23, 2.07, 2.02)
x <- seq(0,10, by=0.01)
mu <- 2.39
lambda <- 1
kappa <- dexp(x,lambda)
k <- length(kappa)
plot(k, kappa, type = 'l')
plot(x, kappa, type = 'l')
?sapply
likelihood = likelihood*Mises(kappa, y, mu)
likelihood = Mises(kappa, y, mu)
likelihood = Mises(kappa, y, mu)
Mises <- function(kappa, y, mu) {
I <- besselI(kappa,0)
return (exp(kappa*cos(y-mu)))/(2*pi*I)
}
likelihood = Mises(kappa, y, mu)
likelihood = Mises(kappa[1], y, mu)
install.packages(knitr)
install.packages('knitr')
install.packages("knitr")
install.packages("rmarkndown")
install.packages("markndown")
install.packages(“devtools”)
install.packages('devtools')
?optim
data <- read.table("eBayNumberOfBidderData.txt", header = TRUE)
########## A ##########
fit <- glm(nBids ~ 0 + ., data, family = poisson)
coeff <- fit$coefficients
plot(abs(coeff), type='h', lwd=2, xlab = "coefficient index")
data <- read.table("eBayNumberOfBidderData.txt", header = TRUE)
setwd("~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3")
data <- read.table("eBayNumberOfBidderData.txt", header = TRUE)
########## A ##########
fit <- glm(nBids ~ 0 + ., data, family = poisson)
coeff <- fit$coefficients
plot(abs(coeff), type='h', lwd=2, xlab = "coefficient index")
plot(abs(coeff), type='h',
lwd=2,
xlab = "coefficient index",
main='Significance of covariates',
ylab='absolute value of coefficient')
data$nBids
coeff
?optim
View(data)
X <- as.matrix(data[,2:9])
View(X)
X <- as.matrix(data[,2:10])
?sum
?dmvnorm
??dmvnorm
setwd("~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab2")
womenData = read.table("WomenWork.txt", header=TRUE)
library(mvtnorm)
######## A ########
# Added a zero in the model formula so that R doesn’t add an extra intercept
# A . in the model formula means to add all other variables in the dataset as features
glmModel <- glm(Work ~ 0 + ., data = womenData, family = binomial)
######## B ########
# Param setup
tau <- 10
nParams <- 8
mu <- as.vector(rep(0, nParams))
X <- as.matrix(womenData[,2:9])
y <- as.matrix(womenData[,1])
initVal <- as.vector(rep(0,nParams))
sigma <-  tau^2 * diag(nParams)
initBetas <- rep(0,nParams)
# Calculate the Log Posterior Logistic
logPost <- function(beta,y,X,mu,Sigma) {
# Calculate predictions by multiplying data with betas
pred <- X%*%beta
# Log likelihood function, derived by taking the log of the likelihood function prod(e^pred*y/(1+e^pred))
logLik <- sum(y * pred - log(1 + exp(pred)))
#
logPrior <- dmvnorm(beta, matrix(0,nParams,1), Sigma, log=TRUE);
print(logPrior)
return (logPrior + logLik)
}
OptimResults<-optim(initBetas,logPost,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
logPost <- function(beta,y,X,mu,Sigma) {
# Calculate predictions by multiplying data with betas
pred <- X%*%beta
# Log likelihood function, derived by taking the log of the likelihood function prod(e^pred*y/(1+e^pred))
logLik <- sum(y * pred - log(1 + exp(pred)))
#
logPrior <- dmvnorm(beta, matrix(0,nParams,1), Sigma, log=TRUE);
print(logPrior)
print(logLik)
return (logPrior + logLik)
}
OptimResults<-optim(initBetas,logPost,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
########## B ##########
sigma <- 100 * solve(t(X)%*%X)
logPrior <- dmvnorm(beta, matrix(0,nParams,1), Sigma, log=TRUE);
logPrior <- dmvnorm(beta, matrix(0,nParams,1), sigma, log=TRUE);
# Calculate the Log Posterior Logistic
logPost <- function(beta,y,X,mu,Sigma) {
print(beta)
# Calculate predictions by multiplying data with betas
pred <- X%*%beta
# Log likelihood function, derived by taking the log of the likelihood function prod(e^pred*y/(1+e^pred))
logLik <- sum(y * pred - log(1 + exp(pred)))
#
logPrior <- dmvnorm(beta, matrix(0,nParams,1), Sigma, log=TRUE);
return (logPrior + logLik)
}
OptimResults<-optim(initBetas,logPost,gr=NULL,y,X,mu,
OptimResults<-optim(initBetas,logPost,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
?optim
sigmaPrior <- 100 * solve(t(X)%*%X)
logPois <- function(beta, x) {
# log likelihood of poisson model
n <- length(x)
logLik <- n*exp(t(x)%*%beta) + ( t(x)%*%beta * sum(x) ) ##sista termen??
# log of prior
logPrior <- dmvnorm(beta, mean = 0, sigma = sigmaPrior, log=TRUE);
# add
return(logLik + logPrior)
}
OptimResults<-optim(coeff,logPois,gr=NULL,X,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
logPois <- function(beta, x) {
# log likelihood of poisson model
print(x)
n <- length(x)
logLik <- n*exp(t(x)%*%beta) + ( t(x)%*%beta * sum(x) ) ##sista termen??
# log of prior
logPrior <- dmvnorm(beta, mean = 0, sigma = sigmaPrior, log=TRUE);
# add
return(logLik + logPrior)
}
OptimResults<-optim(coeff,logPois,gr=NULL,X,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
ogPost <- function(beta,y,X,mu,Sigma) {
# Calculate predictions by multiplying data with betas
print(X)
pred <- X%*%beta
# Log likelihood function, derived by taking the log of the likelihood function prod(e^pred*y/(1+e^pred))
logLik <- sum(y * pred - log(1 + exp(pred)))
#
logPrior <- dmvnorm(beta, matrix(0,nParams,1), Sigma, log=TRUE);
return (logPrior + logLik)
}
OptimResults<-optim(initBetas,logPost,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
X <- as.matrix(womenData[,2:9])
View(X)
X <- as.matrix(data[,2:10])
t(X)%*%X
logPois <- function(beta, x) {
# log likelihood of poisson model
n <- length(x)
print(n)
logLik <- n*exp(t(x)%*%beta) + ( t(x)%*%beta * sum(x) ) ##sista termen??
# log of prior
logPrior <- dmvnorm(beta, mean = 0, sigma = sigmaPrior, log=TRUE);
# add
return(logLik + logPrior)
}
OptimResults<-optim(coeff,logPois,gr=NULL,X,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
OptimResults<-optim(coeff,logPois,gr=NULL,X,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
X <- as.matrix(data[,2:10])
OptimResults<-optim(coeff,logPois,gr=NULL, x = data$nBids,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
?sum
X[,1]
X[1,]
logPois <- function(beta, y, x) {
# log likelihood of poisson model
n <- length(x)
logLik <- 0
for (i in 1:length(n)) {
logLik <- logLik + y[i] * t(beta)%*%x[i,] - exp( t(beta)%*%x[i,] - log(factorial(y[i])))
}
# log of prior
logPrior <- dmvnorm(beta, mean = 0, sigma = sigmaPrior, log=TRUE)
# add
return(logLik + logPrior)
}
OptimResults<-optim(coeff,logPois,gr=NULL, y = data$nBids,x = X,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
logPois <- function(beta, y, x) {
# log likelihood of poisson model
n <- length(x)
logLik <- 0
for (i in 1:length(n)) {
logLik <- logLik + y[i] * t(beta)%*%x[i,] - exp( t(beta)%*%x[i,] - log(factorial(y[i])))
}
# log of prior
logPrior <- dmvnorm(beta, mean = rep(0, 9), sigma = sigmaPrior, log=TRUE)
# add
return(logLik + logPrior)
}
OptimResults<-optim(coeff,logPois,gr=NULL, y = data$nBids,x = X,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
View(sigmaPrior)
# log of prior
logPrior <- dmvnorm(beta, mean = rep(0, 8), sigma = sigmaPrior, log=TRUE)
logPois <- function(beta, y, x) {
# log likelihood of poisson model
n <- length(x)
logLik <- 0
for (i in 1:length(n)) {
logLik <- logLik + y[i] * t(beta)%*%x[i,] - exp( t(beta)%*%x[i,] - log(factorial(y[i])))
}
# log of prior
logPrior <- dmvnorm(beta, mean = rep(0, 8), sigma = sigmaPrior, log=TRUE)
# add
return(logLik + logPrior)
}
OptimResults<-optim(coeff,logPois,gr=NULL, y =
OptimResults<-optim(coeff,logPois,gr=NULL, y = data$nBids,x = X,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
rep(0,8)
sigmaPrior
summary(rep(0,8))
summary(sigmaPrior)
summary(X)
########## B ##########
sigmaPrior <- 100 * solve(t(X)%*%X)
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
setwd("~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3")
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
summary(OptimResults)
OptimResults$hessian
OptimResults$par
postCov <- -solve(OptimResults$hessian)
st_div <- sqrt(diag(postCov))
betaMode <- OptimResults$par
st_div
betaMode
?RWMSampler
??RWMSampler
??runif
runif(1,0,1)
gaussianSample <- function(theta, sigma, c) {
val <- rmvnorm(1, theta, c*sigma, log=TRUE)
return (val)
}
RWMSampler <- function(it, fn,...) {
c <- 1
accRate <- 0
sample <- c()
prev <- gaussianSample(betaMode, postCov, c)
for (i in 1:it) {
candidate <- gaussianSample(prev, postCov, c)
alpha <- min(1,exp(fn(prev) - fn(candidate)))
u <- runif(1, 0, 1)
if (alpha <= u) {
# accept candidate
prev <- candidate
accRate <- accRate + 1
sample <- c(sample, prev)
}
}
return (sample)
}
sample = RWMSampler(100, logPois, betaMode, data$nBids, X)
?rmvnorm
aussianSample <- function(theta, sigma, c) {
val <- rmvnorm(1, theta, c*sigma)
return (val)
}
RWMSampler <- function(c, it, fn,...) {
accRate <- 0
sample <- c()
prev <- gaussianSample(betaMode, postCov, c)
for (i in 1:it) {
candidate <- gaussianSample(prev, postCov, c)
alpha <- min(1,exp(fn(prev, ...) - fn(candidate, ...)))
u <- runif(1, 0, 1)
if (alpha <= u) {
# accept candidate
prev <- candidate
accRate <- accRate + 1
sample <- c(sample, prev)
}
}
return (sample)
}
sample = RWMSampler(100, logPois, betaMode, data$nBids, X)
library(mvtnorm)
gaussianSample <- function(theta, sigma, c) {
val <- rmvnorm(1, theta, c*sigma)
return (val)
}
RWMSampler <- function(c, it, fn,...) {
accRate <- 0
sample <- c()
prev <- gaussianSample(betaMode, postCov, c)
for (i in 1:it) {
candidate <- gaussianSample(prev, postCov, c)
alpha <- min(1,exp(fn(prev, ...) - fn(candidate, ...)))
u <- runif(1, 0, 1)
if (alpha <= u) {
# accept candidate
prev <- candidate
accRate <- accRate + 1
sample <- c(sample, prev)
}
}
return (sample)
}
sample = RWMSampler(100, logPois, betaMode, data$nBids, X)
sample = RWMSampler(1,100, logPois, betaMode, data$nBids, X)
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
RWMSampler <- function(c, it, fn,...) {
print(...)
accRate <- 0
sample <- c()
prev <- gaussianSample(betaMode, postCov, c)
for (i in 1:it) {
candidate <- gaussianSample(prev, postCov, c)
alpha <- min(1,exp(fn(prev, ...) - fn(candidate, ...)))
u <- runif(1, 0, 1)
if (alpha <= u) {
# accept candidate
prev <- candidate
accRate <- accRate + 1
sample <- c(sample, prev)
}
}
return (sample)
}
sample = RWMSampler(1,100, logPois, betaMode, data$nBids, X)
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
sample = RWMSampler(1,100, logPois, betaMode, data$nBids, X)
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
plot(sample, type='l')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
accRate/10000
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3/lab3_2.R')
summary(sample)
