day <- x_max * 366
ady
day
x_max <- -beta_post[,2]/(2*beta_post[,3])
hist(x_max)
hist(x_max * 366)
time
data$time
?optim
?dnorm
source('~/Documents/Liu/Ã…r 4/TDDE07/labs/tdde07/Lab2/lab2_2.R')
######## D ########
womenData = read.table("WomenWork.txt", header=TRUE)
# Added a zero in the model formula so that R doesnâ€™t add an extra intercept
# A . in the model formula means to add all other variables in the dataset as features
glmModel <- glm(Work ~ 0 + ., data = womenData, family = binomial)
# Param setup
tau <- 10
nParams <- 8
mu <- as.vector(rep(0, nParams))
X <- as.matrix(womenData[,2:9])
y <- as.matrix(womenData[,1])
initVal <- as.vector(rep(0,nParams))
sigma <-  tau^2 * diag(nParams)
initBetas <- rep(0,nParams)
# Calculate the Log Posterior Logistic
logPost <- function(beta,y,X,mu,Sigma) {
# Calculate predictions by multiplying data with betas
pred <- X%*%beta
# Log likelihood function, derived by taking the log of the likelihood function prod(e^pred*y/(1+e^pred))
logLik <- sum(y * pred - log(1 + exp(pred)))
#
logPrior <- dmvnorm(beta, matrix(0,nParams,1), Sigma, log=TRUE);
return (logPrior + logLik)
}
OptimResults<-optim(initBetas,logPost,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
postHessian <- sqrt(diag(-solve(OptimResults$hessian)))[7]
betaMode <- OptimResults$par[7]
nSmallChild <- postDraws[,7]
postDraws <- dnorm(x=nSmallChild, postHessian)
plot(postDraws)
postDraws <- dnorm(x=nSmallChild, postHessian)
postDraws <- dnorm(x=nSmallChild, postHessian)
postHessian <- sqrt(diag(-solve(OptimResults$hessian)))[7]
betaMode <- OptimResults$par[7]
nSmallChild <- postDraws[,7]
postHessian <- -solve(OptimResults$hessian)
st_div <- sqrt(diag(postHessian))
st_div
postDraws <- dnorm(x=nSmallChild, st_div[7])
nSmallChild <- postDraws[,7]
postDraws <- dnorm(seq(0,10,by=0.01) betaMode[7] st_div[7])
postDraws <- dnorm(seq(0,10,by=0.01), betaMode[7], st_div[7])
plot(postDraws)
?dnorm
postDraws <- dnorm(x = womenData$NSmallChild, mean = betaMode[7], sd = st_div[7])
plot(postDraws)
betaMode[7]
OptimResults$par[7]
postDraws <- dnorm(x = womenData$NSmallChild, mean = betaMode, sd = st_div[7])
plot(postDraws)
postDraws <- dnorm(x = seq(0,10,0.01), mean = betaMode, sd = st_div[7])
plot(postDraws)
plot(postDraws,
xlim = c(0,10),
ylim = c(0,5))
plot(postDraws,
xlim = c(0,1000),
ylim = c(0,1))
plot(postDraws)
plot(postDraws,
xlim = c(0,10))
plot(postDraws,
xlim = c(0,100))
plot(postDraws,
xlim = c(0,100),
type = 'l')
plot(postDraws,
xlim = c(0,100),
ylim = c(0,0.05),
type = 'l')
plot(postDraws,
xlim = c(0,100),
ylim = c(0,0.02),
type = 'l')
plot(postDraws,
xlim = c(0,100),
ylim = c(0,0.002),
type = 'l')
plot(postDraws,
xlim = c(0,100),
ylim = c(0,0.003),
type = 'l')
plot(postDraws,
xlim = c(0,100),
ylim = c(0,0.002),
type = 'l')
?quantile
cred_int <- quantile(postDraws, c(0.025, 0.975))
cred_int
?pnorm
plot(postDraws,
xlim = c(0,100),
ylim = c(0,0.002),
type = 'l')
abline(cred_int[1])
cred_int[1]
?abline
abline(a = cred_int[1])
abline(a = cred_int[1], b = cred_int[2])
abline(a = cred_int[1], b = null)
abline(v = cred_int[1])
plot(postDraws,
xlim = c(0,100),
ylim = c(0,0.002),
type = 'l')
abline(v = cred_int[1], col='red')
abline(v = cred_int[2], col='green')
plot(postDraws,
xlim = c(0,20),
ylim = c(0,0.002),
type = 'l')
abline(v = cred_int[1], col='red')
abline(v = cred_int[2], col='blue')
?rmvnorm
predDist <- function(n, beta, sigma) {
for (i in 1:n) {
betaDraw = rmvnorm(1, mean = beta, sigma = sigma)
}
}
predDist(1, postDist, postCov)
postCov <- -solve(OptimResults$hessian)
predDist(1, postDist, postCov)
postDist <- dnorm(x = seq(0,10,0.01), mean = betaMode, sd = st_div[7])
predDist(1, postDist, postCov)
postDist
predDist(1, betaMode, postCov)
betaMode
postCov
betaMode <- OptimResults$par
nSmallChild <- postDraws[,7]
postDist <- dnorm(x = seq(0,10,0.01), mean = betaMode[7], sd = st_div[7])
predDist(1, betaMode, postCov)
predDist()
predDist(1, betaMode, postCov)
predDist(1, betaMode, postCov)
predDist <- function(n, beta, sigma) {
for (i in 1:n) {
betaDraw = rmvnorm(1, mean = beta, sigma = sigma)
print(betaDraw)
}
}
predDist(1, betaMode, postCov)
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 0,
age = 40,
nSmallChild = 1,
nBigChild = 1)
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
predDist(1, betaMode, postCov, y)
yPred <- exp(t(y)%*%betaDra)/(1+exp(t(y)%*%betaDraw))
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
yPred <- exp(t(y)%*%betaDraw)/(1+exp(t(y)%*%betaDraw))
}
}
predDist(1, betaMode, postCov, y)
nSmallChild = 1,
nBigChild = 1)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
yPred <- exp(t(y)%*%betaDraw)/(1+exp(t(y)%*%betaDraw))
print(yPred)
}
}
predDist(1, betaMode, postCov, y)
cred_int <- quantile(postDraws, c(0.025, 0.975))
plot(postDist,
xlim = c(0,100),
ylim = c(0,0.002),
type = 'l')
abline(v = cred_int[1], col='red')
abline(v = cred_int[2], col='blue')
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1)
y
y <- as.vector(c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1))
y
#probability
p <- exp(t(y)%*%betaDraw)/(1+exp(t(y)%*%betaDraw))
predDist(1, betaMode, postCov, y)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(t(y)%*%betaDraw)/(1+exp(t(y)%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
y <- c(constant = 1,
husbandInc = 10,
educYears = 8,
expYears = 10,
expYears2 = 1,
age = 40,
nSmallChild = 1,
nBigChild = 1)
predDist <- function(n, beta, sigma, y) {
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
print(p)
}
}
predDist(1, betaMode, postCov, y)
predDist <- function(n, beta, sigma, y) {
y_draws = c()
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
y_draw = rbern(n=1, p)
y_draws = c(y_draws, ydraw)
}
return y_draws
}
predDist <- function(n, beta, sigma, y) {
y_draws = c()
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
y_draw = rbern(n=1, p)
y_draws = c(y_draws, ydraw)
}
return (y_draws)
}
draws = predDist(1, betaMode, postCov, y)
?bern
??bern
?rbern
??rbern
??bern
predDist <- function(n, beta, sigma, y) {
y_draws = c()
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
y_draw = rbinom(1, 1, p)
y_draws = c(y_draws, ydraw)
}
return (y_draws)
}
draws = predDist(10, betaMode, postCov, y)
predDist <- function(n, beta, sigma, y) {
y_draws = c()
for (i in 1:n) {
#beta draw
betaDraw = as.vector(rmvnorm(1, mean = beta, sigma = sigma))
#probability
p <- exp(y%*%betaDraw)/(1+exp(y%*%betaDraw))
#prediction of y
y_draw = rbinom(1, 1, p)
y_draws = c(y_draws, y_draw)
}
return (y_draws)
}
draws = predDist(10, betaMode, postCov, y)
draws
workProb <- sum(draws == 1)
nworkProb <- sum(draws == 0)
workProb
draws = predDist(1000, betaMode, postCov, y)
workProb <- sum(draws == 1)
nworkProb <- sum(draws == 0)
draws = predDist(n_draws, betaMode, postCov, y)
workProb <- sum(draws == 1)
hist(c(workProb, n_draws - workProb))
hist(c(workProb, (n_draws - workProb)))
hist(c(workProb, (n_draws - workProb)))
hist(c(workProb, (n_draws - workProb)))
womenData = read.table("WomenWork.txt", header=TRUE)
# Added a zero in the model formula so that R doesnâ€™t add an extra intercept
# A . in the model formula means to add all other variables in the dataset as features
glmModel <- glm(Work ~ 0 + ., data = womenData, family = binomial)
# Param setup
tau <- 10
nParams <- 8
mu <- as.vector(rep(0, nParams))
X <- as.matrix(womenData[,2:9])
y <- as.matrix(womenData[,1])
initVal <- as.vector(rep(0,nParams))
sigma <-  tau^2 * diag(nParams)
initBetas <- rep(0,nParams)
# Calculate the Log Posterior Logistic
logPost <- function(beta,y,X,mu,Sigma) {
# Calculate predictions by multiplying data with betas
pred <- X%*%beta
# Log likelihood function, derived by taking the log of the likelihood function prod(e^pred*y/(1+e^pred))
logLik <- sum(y * pred - log(1 + exp(pred)))
#
logPrior <- dmvnorm(beta, matrix(0,nParams,1), Sigma, log=TRUE);
return (logPrior + logLik)
}
OptimResults<-optim(initBetas,logPost,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
postCov <- -solve(OptimResults$hessian)
st_div <- sqrt(diag(postCov))
betaMode <- OptimResults$par
nSmallChild <- postDraws[,7]
postDist <- dnorm(x = seq(0,10,0.01), mean = betaMode[7], sd = st_div[7])
# plot posterior distribution NSmallChild parameter
cred_int <- quantile(postDraws, c(0.025, 0.975))
plot(postDist,
xlim = c(0,100),
ylim = c(0,0.002),
type = 'l')
abline(v = cred_int[1], col='red')
abline(v = cred_int[2], col='blue')
