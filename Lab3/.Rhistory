income <- c(1,1,1,1,1,1,1,1,1,1)
#income <- c(14,25,45,25,30,33,19,50,34,67)
income <- c(1,1,1,1,1,1,1,1,1,1)
m <- 3.5
n <- length(income)
n_draws = 10000
t <- 0
for (v in income) {
t <- t + (log(v) - m) ^ 2
}
tSquared <- t / n
# simulate postarior draws
X_draw <- rchisq(n_draws, n)
sigma_sq = n*tSquared / X_draw
#theoretical
theoretical <- function(theta, v, s) {
return ( ((v/2) ^ (v/2)) / gamma(v/2)  * (s ^ v) * (theta ^ (-(v/2+1))) * exp((-v * s ^ 2) / (2 * theta) ))
}
range <- seq(0,10,by=0.01)
mx <- 0 * range
for (i in 1:length(range)) {
mx[i] <- theoretical(range[i], length(income), sqrt(tSquared))
}
# plot
hist(sigma_sq, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
# -----------B-------------
z <- sqrt(sigma_sq/2)
G <- 2*pnorm(z)-1
hist(G, 100, freq = FALSE, xlab="posterior of Gini coefficient", ylab="") # Plot where y = values and x = index of the value in the vector
?rchisq
income <- c(14,25,45,25,30,33,19,50,34,67)
#income <- c(1,1,1,1,1,1,1,1,1,1)
m <- 3.5
n <- length(income)
n_draws = 10000
t <- 0
for (v in income) {
t <- t + (log(v) - m) ^ 2
}
tSquared <- t / n
# simulate postarior draws
X_draw <- rchisq(n_draws, n)
sigma_sq = n*tSquared / X_draw
#theoretical
theoretical <- function(theta, v, s) {
return ( ((v/2) ^ (v/2)) / gamma(v/2)  * (s ^ v) * (theta ^ (-(v/2+1))) * exp((-v * s ^ 2) / (2 * theta) ))
}
range <- seq(0,10,by=0.01)
mx <- 0 * range
for (i in 1:length(range)) {
mx[i] <- theoretical(range[i], length(income), sqrt(tSquared))
}
# plot
hist(1/sigma_sq, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
# -----------A-------------
income <- c(14,25,45,25,30,33,19,50,34,67)
#income <- c(1,1,1,1,1,1,1,1,1,1)
m <- 3.5
n <- length(income)
n_draws = 10000
t <- 0
for (v in income) {
t <- t + (log(v) - m) ^ 2
}
tSquared <- t / n
# simulate postarior draws
X_draw <- rchisq(n_draws, n)
sigma_sq = n*tSquared / X_draw
#theoretical
theoretical <- function(theta, v, s) {
return ( ((v/2) ^ (v/2)) / gamma(v/2)  * (s ^ v) * (theta ^ (-(v/2+1))) * exp((-v * s ^ 2) / (2 * theta) ))
}
range <- seq(0,10,by=0.01)
mx <- 0 * range
for (i in 1:length(range)) {
mx[i] <- theoretical(range[i], length(income), sqrt(tSquared))
}
# plot
hist(sigma_sq, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
# plot
hist(sigma_sq, 100, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
hist(G, 1000, freq = FALSE, xlab="posterior of Gini coefficient", ylab="") # Plot where y = values and x = index of the value in the vector
# plot
hist(sigma_sq, 100, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
# plot
hist(sigma_sq, 1000, freq=FALSE)
# plot
hist(sigma_sq, 100, freq=FALSE)
lines(range, mx, lwd=3, type='l', col='red', xlab = 'sigma')
cred_int <- quantile(G, probs = c(a, b))
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
G_dens = density(G)
View(G_dens)
View(G_dens)
sumY <- sum(G_dens.y)
sumY <- sum(G_dens.Y)
sumY <- sum(G_dens[y])
sumY <- sum(G_dens['y'])
sumY <- sum(G_dens[,y])
sumY <- sum(G_dens[,'y'])
sumY <- sum(G_dens["y",])
sumY <- sum(G_dens["y"])
sumY <- (G_dens["y"])
View(sumY)
sumY <- Reduce("+", G_dens["y"])
sumY <- Reduce("+", G_dens["y"])
sumY <- Reduce("+", G_dens["y",])
sumY <- Reduce("+", G_dens["y"])
View(G_dens)
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
View(G.dens)
View(G_dens)
?density
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
View(yVals)
sum <- sum(G_dens$y)
y_ordered = G_dens$y[order(-G_dens$y)]
y_ordered = G_dens$y[order(+G_dens$y)]
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$x)]
dens_mass = sum(G_dens$y)
sum <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
cred_int <- quantile(G, probs = c(a, b))
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
a <- 0.025
b <- 0.975
cred_int <- quantile(G, probs = c(a, b))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_2.R')
cred_int <- quantile(G, probs = c(0.025, 0.975))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
cred_int <- quantile(G, probs = c(0.025, 0.975))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
current_mass <- 0
for (i in y_ordered) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
cred_int <- quantile(G, probs = c(0.025, 0.975))
G_dens = density(G)
y_ordered = G_dens$y[order(-G_dens$y)]
x_ordered = G_dens$x[order(-G_dens$y)]
dens_mass = sum(G_dens$y)
sum <- 0
current_mass <- 0
for (i in 1:length(y_ordered)) {
current_mass <- y_ordered[i] + sum
if ((current_mass/dens_mass) > 0.95) {
break
} else {
sum <- current_mass
}
}
a <- min(x_ordered[1:i])
b <- max(x_ordered[1:i])
plot(density(G),
col='blue',
xlim=c(0,1),
ylim=c(0,9),
main="95% credibility interval")
abline(v=cred_int[1], col='red')
abline(v=cred_int[2], col='red')
abline(v=a, col='green')
abline(v=b, col='green')
k <- dexp(1)
plot(k)
k <- dexp(y,1)
plot(k)
?dexp
n = seq(0, 10, by=0.01)
k <- dexp(n,1)
plot(k)
plot(k, type='l')
?bessel
?pi
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_3.R')
clear
?clear
k <- length(kappa)
source('~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab1/lab1_3.R')
?dexp
kappa <- dexp(1)
kappa <- dexp(2)
kappa <- dexp(x,lambda)
k <- length(kappa)
y <- c(-2.44, 2.14, 2.54, 1.83, 2.01, 2.33, -2.79, 2.23, 2.07, 2.02)
x <- seq(0,10, by=0.01)
mu <- 2.39
lambda <- 1
kappa <- dexp(x,lambda)
k <- length(kappa)
plot(k, kappa, type = 'l')
plot(x, kappa, type = 'l')
?sapply
likelihood = likelihood*Mises(kappa, y, mu)
likelihood = Mises(kappa, y, mu)
likelihood = Mises(kappa, y, mu)
Mises <- function(kappa, y, mu) {
I <- besselI(kappa,0)
return (exp(kappa*cos(y-mu)))/(2*pi*I)
}
likelihood = Mises(kappa, y, mu)
likelihood = Mises(kappa[1], y, mu)
install.packages(knitr)
install.packages('knitr')
install.packages("knitr")
install.packages("rmarkndown")
install.packages("markndown")
install.packages(“devtools”)
install.packages('devtools')
setwd("~/Documents/Liu/År 4/TDDE07/labs/tdde07/Lab3")
ata = read.table("rainfall.txt", col.names = "x")
########### A ###########
# parameter init values
mu0 <- 30
tau0 <- 1
v0 <- 0
sigma0 <- 10
n <- nrow(data)
dataMean <- mean(data$x)
vn <- v0 + n
iter <- 1000
# draw mu
drawMu <- function(prevMu, prevSigma) {
tauSq <- 1/( (n/prevSigma) + (1/tau0^2) )
w <- (n/prevSigma)/((n/prevSigma) + (1/tau0^2))
mu <- w*dataMean + (1-w)*mu0
draw <- rnorm(1, mu, sqrt(tauSq))
return (draw)
}
#inv chi square
invChiSquare <- function(v, s) {
return(v*s / rchisq(1,v))
}
# draw sigma
drawSigma <- function(mu) {
sum <- 0
for (i in 1:n) {
sum <- sum + (data[i,1] - mu)^2
}
s <- (v0*sigma0 + sum)/(n+v0)
return(invChiSquare(vn, s))
}
mu <- c()
sigma2 <- c()
currMu <- 32
currSigma <- sigma0
for (i in 1:iter) {
if(i %% 2 == 0) {
currMu <- drawMu(currMu, currSigma)
} else {
currSigma <- drawSigma(currMu)
}
mu <- c(mu, currMu)
sigma2 <- c(sigma2, currSigma)
}
## plot trajactories of sampled mu and sigma
plot(mu, sqrt(sigma2),type='l')
data = read.table("rainfall.txt", col.names = "x")
# parameter init values
mu0 <- 30
tau0 <- 1
v0 <- 0
sigma0 <- 10
n <- nrow(data)
dataMean <- mean(data$x)
vn <- v0 + n
iter <- 1000
# draw mu
drawMu <- function(prevMu, prevSigma) {
tauSq <- 1/( (n/prevSigma) + (1/tau0^2) )
w <- (n/prevSigma)/((n/prevSigma) + (1/tau0^2))
mu <- w*dataMean + (1-w)*mu0
draw <- rnorm(1, mu, sqrt(tauSq))
return (draw)
}
#inv chi square
invChiSquare <- function(v, s) {
return(v*s / rchisq(1,v))
}
# draw sigma
drawSigma <- function(mu) {
sum <- 0
for (i in 1:n) {
sum <- sum + (data[i,1] - mu)^2
}
s <- (v0*sigma0 + sum)/(n+v0)
return(invChiSquare(vn, s))
}
mu <- c()
sigma2 <- c()
currMu <- 32
currSigma <- sigma0
for (i in 1:iter) {
if(i %% 2 == 0) {
currMu <- drawMu(currMu, currSigma)
} else {
currSigma <- drawSigma(currMu)
}
mu <- c(mu, currMu)
sigma2 <- c(sigma2, currSigma)
}
## plot trajactories of sampled mu and sigma
plot(mu, sqrt(sigma2),type='l')
# draw mu
drawMu <- function(prevMu, prevSigma) {
tauSq <- 1/( (n/prevSigma) + (1/tau0^2) )
w <- (n/prevSigma)/((n/prevSigma) + (1/tau0^2))
mu <- w*dataMean + (1-w)*mu0
draw <- rnorm(1, mu, sqrt(tauSq))
return (draw)
}
#inv chi square
invChiSquare <- function(v, s) {
return(v*s / rchisq(1,v))
}
# draw sigma
drawSigma <- function(mu) {
sum <- 0
for (i in 1:n) {
sum <- sum + (data[i,1] - mu)^2
}
s <- (v0*sigma0 + sum)/(n+v0)
return(invChiSquare(vn, s))
}
# draw sigma
drawSigma <- function(mu) {
sum <- 0
for (i in 1:n) {
sum <- sum + (data[i,1] - mu)^2
}
s <- (v0*sigma0 + sum)/(n+v0)
return(invChiSquare(vn, s))
}
mu <- c()
sigma2 <- c()
currMu <- 32
currSigma <- sigma0
for (i in 1:iter) {
if(i %% 2 == 0) {
currMu <- drawMu(currMu, currSigma)
} else {
currSigma <- drawSigma(currMu)
}
mu <- c(mu, currMu)
sigma2 <- c(sigma2, currSigma)
}
## plot trajactories of sampled mu and sigma
plot(mu, sqrt(sigma2),type='l')
########## C #########
xGrid <- seq(0,400,by=(100/n))
sigma2 <- c(sigma2, currSigma)
data = read.table("rainfall.txt", col.names = "x")
########### A ###########
# parameter init values
mu0 <- 30
tau0 <- 1
v0 <- 0
sigma0 <- 10
n <- nrow(data)
dataMean <- mean(data$x)
vn <- v0 + n
iter <- 1000
# draw mu
drawMu <- function(prevMu, prevSigma) {
tauSq <- 1/( (n/prevSigma) + (1/tau0^2) )
w <- (n/prevSigma)/((n/prevSigma) + (1/tau0^2))
mu <- w*dataMean + (1-w)*mu0
draw <- rnorm(1, mu, sqrt(tauSq))
return (draw)
}
#inv chi square
invChiSquare <- function(v, s) {
return(v*s / rchisq(1,v))
}
# draw sigma
drawSigma <- function(mu) {
sum <- 0
for (i in 1:n) {
sum <- sum + (data[i,1] - mu)^2
}
s <- (v0*sigma0 + sum)/(n+v0)
return(invChiSquare(vn, s))
}
mu <- c()
sigma2 <- c()
currMu <- 32
currSigma <- sigma0
for (i in 1:iter) {
if(i %% 2 == 0) {
currMu <- drawMu(currMu, currSigma)
} else {
currSigma <- drawSigma(currMu)
}
mu <- c(mu, currMu)
sigma2 <- c(sigma2, currSigma)
}
mean(sigma2)
sqrt(mean(sigma2))
mean(mu)
