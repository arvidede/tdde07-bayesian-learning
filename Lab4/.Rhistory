asd
help()
q
new
new function(class())
new function() {}
new function() {
print('hej')
}
# Tjo
attach(mtcars)
help plot()
help("plot")
plot(test, test)
plot(test, test_)
plot(hej, hoj)
help("vector")
# Tjo
attach(mtcars)
title("Regression of MPG on Weight")
abline(lm(hej~hej))
hej <- c(a = 1, b = 2)
abline(lm(hej~hej))
help("plot")
manipulate(
BetaPriorPostPlot(a,b,n,p),
a = slider(1, 100, step=1, initial = 2, label = "The hyperparameter a in Beta(a,b) prior"),
b = slider(1, 100, step=1, initial = 2, label = "The hyperparameter b in Beta(a,b) prior"),
n = slider(1, 1000, step=1, initial = 10, label = "The number of trials, n"),
p = slider(0, 1, step=0.01, initial = 0.4, label = "Success proportion in the sample")
)
library(manipulate)
install.packages("manipulate")
library(manipulate)
####################################################################
## Plotting the prior-to-posterior mapping for the Bernoulli model.
####################################################################
BetaPriorPostPlot <- function(a,b,n,p){
xGrid <- seq(0.001, 0.999, by=0.001)
normalizedLikelihood = dbeta(xGrid, n*p+1, n*(1-p)+1)
prior = dbeta(xGrid, a, b)
posterior = dbeta(xGrid, a+n*p, b+n*(1-p))
maxDensity <- max(normalizedLikelihood, prior, posterior) # Use to make the y-axis high enough
plot(xGrid, normalizedLikelihood, type = 'l', lwd = 3, col = "blue", xlim <- c(0,1), ylim <- c(0, maxDensity), xlab = "theta",
ylab = 'Density', main = 'Bernoulli model - Beta(a,b) prior')
lines(xGrid, posterior, lwd = 3, col = "red")
lines(xGrid, prior, lwd = 3, col = "green")
legend(x = 0.01, y = maxDensity*0.95, legend = c("Likelihood (normalized)", "Prior", "Posterior"), col = c("blue","green","red"), lwd = c(3,3,3), cex = 0.7)
}
manipulate(
BetaPriorPostPlot(a,b,n,p),
a = slider(1, 100, step=1, initial = 2, label = "The hyperparameter a in Beta(a,b) prior"),
b = slider(1, 100, step=1, initial = 2, label = "The hyperparameter b in Beta(a,b) prior"),
n = slider(1, 1000, step=1, initial = 10, label = "The number of trials, n"),
p = slider(0, 1, step=0.01, initial = 0.4, label = "Success proportion in the sample")
)
dBeta ?
q
? rBeta
?rBeta
??rbeta
?dbeta
?plot
?pbeta
?plot
?hist
source('~/Development/R/Test.R')
manipulate(
BetaPriorPostPlot(a,b,n,p),
a = slider(1, 100, step=1, initial = 2, label = "The hyperparameter a in Beta(a,b) prior"),
b = slider(1, 100, step=1, initial = 2, label = "The hyperparameter b in Beta(a,b) prior"),
n = slider(1, 1000, step=1, initial = 10, label = "The number of trials, n"),
p = slider(0, 1, step=0.01, initial = 0.4, label = "Success proportion in the sample")
)
source('~/Development/R/Test.R')
?hist
?beta
?pbeta
?hist
?sum
?sapply
?dmvnorm
??dmvnorm
?min
min(2,4)
min(2,4)
rdunif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
runif(10,0,1)
runif(1,0,1)
runif(1,0,10)
runif(1,0,10)
runif(1,0,1)
mu <- 10
sigma_sq <- 2
T <- 200
x <- mu
phis <- c(0.3, 0.95)
X = c()
for(phi in phis) {
x <- c(x)
for (i in 2:T) {
x <- c(x, AR(mu, x, phi, sigma_sq))
}
# X <- rbind(X, x)
}
AR <- function(mu, prev_x, phi, sigma_sq) {
error <- rnorm(1, 0, sqrt(sigma_sq))
return (mu + phi * (prev_x - mu) + error)
}
mu <- 10
sigma_sq <- 2
T <- 200
x <- mu
phis <- c(0.3, 0.95)
X = c()
for(phi in phis) {
x <- c(x)
for (i in 2:T) {
x <- c(x, AR(mu, x, phi, sigma_sq))
}
# X <- rbind(X, x)
}
rgamma(1,0,1)
plot(dbeta(thetaGrid, alpha, beta))
alpha <- 5
beta <- 2
thetaGrid <- seq(0,10,length=1000)
plot(dbeta(thetaGrid, alpha, beta))
plot(thetaGrid, dbeta(thetaGrid, alpha, beta))
thetaGrid <- seq(0,3,length=1000)
plot(thetaGrid, dbeta(thetaGrid, alpha, beta))
thetaGrid <- seq(0,2,length=1000)
plot(thetaGrid, dbeta(thetaGrid, alpha, beta))
plot(thetaGrid, dbeta(thetaGrid, alpha, beta)/((1-theta)^(beta-1)*theta^(alpha-1))
plot(thetaGrid, dbeta(thetaGrid, alpha, beta)/((1-theta)^(beta-1)*theta^(alpha-1))
plot(thetaGrid, dbeta(thetaGrid, alpha, beta)/((1-theta)^(beta-1)*theta^(alpha-1)))
thetaGrid <- seq(0,1,length=1000)
beta <- rep(0,1000)
i <- 1
for(theta in thetaGrid) {
beta[i] <- dbeta(theta, alpha, beta)/((1-theta)^(beta-1)*theta^(alpha-1))
i <- i+1
}
plot(thetaGrid, beta)
thetaGrid <- seq(0,1,length=1000)
beta <- rep(0,1000)
i <- 1
for(theta in thetaGrid) {
beta[i] <- dbeta(theta, alpha, beta)/((1-theta)^(beta-1)*theta^(alpha-1))
i <- i+1
}
beta <- rep(0,1000)
i <- 1
for(theta in thetaGrid) {
beta[i] <- dbeta(theta, alpha, beta)/((1-theta)^(beta-1)*theta^(alpha-1))
i <- i+1
}
for(theta in thetaGrid) {
print(theta)
beta[i] <- dbeta(theta, alpha, beta)/((1-theta)^(beta-1)*theta^(alpha-1))
i <- i+1
}
for(theta in thetaGrid) {
beta[i] <- dbeta(theta, alpha, beta)/((1-theta)^(beta-1)*theta^(alpha-1))
print(dbeta(theta, alpha, beta))
i <- i+1
}
dbeta(0.5,5,2)
beta <- 2
alpha <- 5
beta <- 2
thetaGrid <- seq(0,1,length=1000)
betas <- rep(0,1000)
i <- 1
for(theta in thetaGrid) {
betas[i] <- dbeta(theta, alpha, beta)/((1-theta)^(beta-1)*theta^(alpha-1))
i <- i+1
}
plot(thetaGrid, betas)
plot(thetaGrid, dbeta(thetaGrid, alpha, beta))
plot(thetaGrid, dbeta(thetaGrid, alpha, beta))
lines(thetaGrid, betas)
lines(thetaGrid, betas)
plot(thetaGrid, dbeta(thetaGrid, alpha, beta))
lines(thetaGrid, betas)
plot(thetaGrid, betas)
betas
?rgamma
plot(thetaGrid, dbeta(thetaGrid, alpha, beta))
plot(thetaGrid, betas)
hist(betas)
hist(betas, na.rm=TRUE)
hist(betas)
thetaGrid <- seq(0.01,0.999,length=1000)
betas <- rep(0,1000)
i <- 1
for(theta in thetaGrid) {
betas[i] <- dbeta(theta, alpha, beta)/((1-theta)^(beta-1)*theta^(alpha-1))
i <- i+1
}
plot(thetaGrid, dbeta(thetaGrid, alpha, beta))
hist(betas)
betas
0.7/(0.5*0.5^4)
0.7/(0.2*0.8^4)
0.7/(0.4*0.6^4)
0.7/(0.8*0.2^4)
0.7/(0.55*0.45^4)
dbeta(0.5, alpha, beta)/((1-0.5)^(beta-1)*0.5^(alpha-1))
b?eta
?beta
beta(5,2)
1/beta(5,2)
gamma(1)
gamma(1)
setwd("~/Studier/TDDE07/Lab4")
library('rstan')
AR <- function(mu, prev_x, phi, sigma_sq) {
error <- rnorm(1, 0, sqrt(sigma_sq))
return (mu + phi * (prev_x - mu) + error)
}
mu <- 10
sigma_sq <- 2
T <- 200
x <- mu
phis <- c(0.3, 0.95)
X = c()
for(phi in phis) {
result <- c(x)
for (i in 2:T) {
x <- AR(mu, x, phi, sigma_sq)
result <- c(result, x)
}
X <- rbind(X, result)
}
model <- stan_model('StanNormalModel.stan')
warmup=1000
iter=2000
niter = 4*(iter-warmup)
fitX <- sampling(model, data = list(T=200, x=X[1,]), iter = iter, warmup = warmup)
fitY <- sampling(model, data = list(T=200, x=X[2,]), iter = iter, warmup = warmup)
# Print the fitted model
print(fitX,digits_summary=3) # Extract posterior samples
postDrawsX <- extract(fitX)
plot(postDrawsX$mu, postDrawsX$phi, main = expression(phi ~ '= 0.3'), ylab=expression(phi), xlab=expression(mu))
lines(mean(postDrawsX$mu), mean(postDrawsX$phi), type='p', col="red")
plot(postDrawsX$mu)
plot(postDrawsX$mu, type='l')
# plot convergence
traceplot(model)
# plot convergence
traceplot(fitX)
View(X)
# plot convergence
traceplot(fitX, main=expression(phi ~ '= 0.3'))
?traceplot
traceplot(fitY, main=expression(phi ~ '= 0.95'))
# plot convergence
traceplot(fitX)
traceplot(fitY)
# plot convergence
traceplot(fitX)
traceplot(fitY)
png('plots/lab4_b_convergence_x')
traceplot(fitX)
dev.off()
png('plots/lab4_b_convergence_x')
traceplot(fitY)
dev.off()
png('plots/lab4_b_convergence_x')
traceplot(fitX)
dev.off()
png('plots/lab4_b_convergence_y')
traceplot(fitY)
dev.off()
png('plots/lab4_b_convergence_x.png')
traceplot(fitX)
dev.off()
png('plots/lab4_b_convergence_y.png')
traceplot(fitY)
dev.off()
# Print the fitted model
print(fitX,digits_summary=3) # Extract posterior samples
print(fitY,digits_summary=3) # Extract posterior samples
fitY <- sampling(model, data = list(T=200, x=X[2,]), iter = iter, warmup = warmup)
print(fitY,digits_summary=3) # Extract posterior samples
traceplot(fitY)
